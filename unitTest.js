var bufferUtils = require('./bufferUtils');
var bgb = require('./bgbCreationTest');
var turf = require('turf');

let originPoint = [0, 0];
let rotationPoint = [5, 0];

//console.log(bufferUtils.getSemiCircleVertices(originPoint, rotationPoint))

/* line = [
  [1, 1] ,
        [4.1, 3.7],
        [7.6, 1]
      ]; */

let line = [
        [7.6, 1],
        [4.1, 3.7],
        [1, 1],
        [2.2, 1]
      ];
//let bgb1 = bgb.getBGBPerp([7.6, 1], [4.1, 3.7], 1);
//let bgb2 = bgb.getBGBPerp([4.1, 3.7], [1, 1], 1);

//tpoly1 = turf.polygon([bgb1], { name: 'poly1' });
//tpoly2 = turf.polygon([bgb2], { name: 'poly2' });

//console.log("first line: \n", tpoly1 );
//console.log("second line: \n", tpoly2 );

//let bbbb = turf.union(tpoly1, tpoly2);

//console.log("bbbb>>> -----------------------\n", turf.getGeom(bbbb) );

/* var bufferArray;
for (let i = 0; i < line.length-1; i++) {
  let node1 = line[i], 
      node2 = line[i + 1];
  let currentLineSegment = [node1, node2];
  let currrentBufferGeometry = bgb.getBGBPerp(node1, node2, 1);
  let geojsonedBufferpolygon = turf.polygon([currrentBufferGeometry], { name: 'poly1' } );

  if (i > 0) {
    bufferArray = turf.union(bufferArray, geojsonedBufferpolygon);
  } else {
    bufferArray = geojsonedBufferpolygon;
  }
} 
let geom = bufferUtils.getGeom(bufferArray);
const util = require('util');
console.log(util.inspect(geom, { maxArrayLength: null })); */



let line1 = [
  [
    -0.10913372039794922,
    5.5790837692940904
  ],
  [
    -0.10059356689453125,
    5.5867718883185935
  ],
  [
    -0.1000356674194336,
    5.587199003084682
  ],
  [
    -0.09857654571533202,
    5.58805323168245
  ],
  [
    -0.08872747421264648,
    5.594022119225569
  ],
  [
    -0.08683115243911743,
    5.595129933783549
  ],
  [
    -0.08557051420211792,
    5.595901398585709
  ],
  [
    -0.08429914712905884,
    5.596686209485461
  ],
  [
    -0.08357226848602295,
    5.597140011225739
  ],
  [
    -0.08325040340423583,
    5.5973348789237685
  ],
  [
    -0.08195489645004272,
    5.598138373814458
  ],
  [
    -0.08162766695022583,
    5.598341249426184
  ],
  [
    -0.08150428533554077,
    5.598418662469986
  ],
  [
    -0.08134603500366211,
    5.598552133211103
  ],
  [
    -0.08118778467178343,
    5.598714967473971
  ],
  [
    -0.08071839809417725,
    5.599350287606817
  ],
  [
    -0.08039385080337524,
    5.600087044543041
  ],
  [
    -0.07997006177902222,
    5.600989303583614
  ],
  [
    -0.07921099662780762,
    5.602590943418656
  ],
  [
    -0.07893472909927368,
    5.603114144813141
  ],
  [
    -0.07870674133300781,
    5.60359730486831
  ],
  [
    -0.07830709218978882,
    5.604456848287654
  ],
  [
    -0.07776260375976562,
    5.605599345035334
  ],
  [
    -0.07720470428466797,
    5.606824590230843
  ],
  [
    -0.07633566856384277,
    5.608701159040161
  ],
  [
    -0.07556319236755371,
    5.610364173011574
  ],
  [
    -0.07503211498260498,
    5.611498650127045
  ],
  [
    -0.07393777370452881,
    5.613866363490533
  ],
  [
    -0.07365882396697998,
    5.614442941613431
  ]
];

let line2=   [ [ -0.109006014027956, 5.579150813726692 ],
[ -0.109006014027956, 5.579150813726692 ],
[ -0.104588336789811, 5.583080956686663 ],
[ -0.104588336789811, 5.583080956686663 ],
[ -0.100405066915322, 5.586795725121768 ],
[ -0.100405066915322, 5.586795725121768 ],
[ -0.099377280782366, 5.587549443379041 ],
[ -0.099377280782366, 5.587549443379041 ],
[ -0.095951327005845, 5.589613190785654 ],
[ -0.095951327005845, 5.589613190785654 ],
[ -0.093463002683952, 5.591084727971801 ],
[ -0.093463002683952, 5.591084727971801 ],
[ -0.088684698732489, 5.594009845780946 ],
[ -0.088684698732489, 5.594009845780946 ],
[ -0.08551118365529, 5.595876170973324 ],
[ -0.08551118365529, 5.595876170973324 ],
[ -0.081219725766807, 5.598550030339794 ],
[ -0.081219725766807, 5.598550030339794 ],
[ -0.080372252990509, 5.600021545041836 ],
[ -0.080372252990509, 5.600021545041836 ],
[ -0.079164153500894, 5.602569769053301 ],
[ -0.079164153500894, 5.602569769053301 ],
[ -0.077306925927307, 5.606499754711307 ],
[ -0.077306925927307, 5.606499754711307 ],
[ -0.073592470780132, 5.614467315641107 ],
[ -0.073592470780132, 5.614467315641107 ] ] ;


let line3 =[
  [
    -0.09372711181640624,
    5.608298084314082
  ],
  [
    -0.09424209594726562,
    5.603258292053774
  ],
  [
    -0.089263916015625,
    5.6006956691375445
  ],
  [
    -0.08668899536132812,
    5.603685394780026
  ],
  [
    -0.09037971496582031,
    5.603856235783068
  ],
  [
    -0.09218215942382812,
    5.595826654635547
  ],
  [
    -0.08728981018066406,
    5.599756037918481
  ],
  [
    -0.09183883666992186,
    5.606333424709707
  ]
];

var bufferArray;
for (let i = 0; i < line3.length-1; i++) {
  let node1 = line3[i], 
      node2 = line3[i + 1];
  //let currentLineSegment = [node1, node2];
  let currrentBufferGeometry = bgb.getBGBPerp(node1, node2, 0.002);
  let geojsonedBufferpolygon = turf.polygon([currrentBufferGeometry], { name: 'poly1' } );

  if (i > 0) {
    bufferArray = turf.union(bufferArray, geojsonedBufferpolygon);
  } else {
    bufferArray = geojsonedBufferpolygon;
  }
} 
let geom = bufferUtils.getGeom(bufferArray);
const util = require('util');
console.log("bufferArray --------------- \n", bufferArray);
console.log(util.inspect(geom, { maxArrayLength: null }));